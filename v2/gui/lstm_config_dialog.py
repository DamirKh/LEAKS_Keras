# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0 on Mon Apr  9 06:43:25 2018
#

import wx
# begin wxGlade: dependencies
import wx.adv


# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class lstm_config_dialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: lstm_config_dialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((1284, 450))
        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, _("www"), _("https://keras.io/layers/recurrent/#lstm"))
        self.units = wx.CheckBox(self, wx.ID_ANY, _("units"))
        self.spin_button_1 = wx.SpinButton(self, wx.ID_ANY)
        self._activation_bool = wx.CheckBox(self, wx.ID_ANY, _("activation"), style=wx.CHK_2STATE)
        self._activation = wx.Choice(self, wx.ID_ANY,
                                     choices=[_("softmax"), _("elu"), _("selu"), _("softplus"), _("softsign"),
                                              _("relu"), _("tanh"), _("sigmoid"), _("hard_sigmoid"), _("linear")])
        self.hyperlink_2 = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, _("help"), _("https://keras.io/activations/"))
        self._recurrent_activation_bool = wx.CheckBox(self, wx.ID_ANY, _("recurrent_activation:"), style=wx.CHK_2STATE)
        self._recurrent_activation = wx.Choice(self, wx.ID_ANY,
                                               choices=[_("softmax"), _("elu"), _("selu"), _("softplus"), _("softsign"),
                                                        _("relu"), _("tanh"), _("sigmoid"), _("hard_sigmoid"),
                                                        _("linear")])
        self._use_bias_bool = wx.CheckBox(self, wx.ID_ANY, _("Set bias to:"), style=wx.CHK_2STATE)
        self._use_bias = wx.CheckBox(self, wx.ID_ANY, _("use"), style=wx.CHK_2STATE)
        self._kernel_initializer_bool = wx.CheckBox(self, wx.ID_ANY, _("kernel_initializer:"), style=wx.CHK_2STATE)
        self._kernel_initializer = wx.Choice(self, wx.ID_ANY,
                                             choices=[_("lecun_uniform"), _("glorot_normal"), _("glorot_uniform"),
                                                      _("he_normal"), _("lecun_normal"), _("he_uniform"),
                                                      _("RandomNormal"), _("RandomUniform"), _("TruncatedNormal"),
                                                      _("Orthogonal"), _("Identity")])
        self.hyperlink_3 = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, _("help"), _("https://keras.io/initializers/"))
        self._return_sequences_bool = wx.CheckBox(self, wx.ID_ANY, _("return sequences"), style=wx.CHK_2STATE)
        self._return_sequences = wx.CheckBox(self, wx.ID_ANY, _("full sequence"), style=wx.CHK_2STATE)
        self._stateful_bool = wx.CheckBox(self, wx.ID_ANY, _("Set stateful to:"), style=wx.CHK_2STATE)
        self._stateful = wx.CheckBox(self, wx.ID_ANY, _("Yes"), style=wx.CHK_2STATE)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.button_dialog_ADVANCED = wx.Button(self, wx.ID_ANY, _("Advanced"))
        self.button_dialog_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        self.button_dialog_OK = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.P_activation, self._activation_bool)
        self.Bind(wx.EVT_CHECKBOX, self.P_recurrent_activation, self._recurrent_activation_bool)
        self.Bind(wx.EVT_CHECKBOX, self.P_use_bias_bool, self._use_bias_bool)
        self.Bind(wx.EVT_CHECKBOX, self.P_kernel_initializer_bool, self._kernel_initializer_bool)
        self.Bind(wx.EVT_CHECKBOX, self.P_return_sequences_bool, self._return_sequences_bool)
        self.Bind(wx.EVT_CHECKBOX, self.P_stateful_bool, self._stateful_bool)
        self.Bind(wx.EVT_BUTTON, self.H_button_dialog_ADVANCED, self.button_dialog_ADVANCED)
        self.Bind(wx.EVT_BUTTON, self.H_button_dialog_CANCEL, self.button_dialog_CANCEL)
        self.Bind(wx.EVT_BUTTON, self.H_button_dialog_OK, self.button_dialog_OK)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: lstm_config_dialog.__set_properties
        self.SetTitle(_("Layer configuration"))
        self.SetSize((1284, 450))
        self.SetFocus()
        self.units.SetToolTip(_("You can't leave this option by default.\nYou are obligated to indicate this."))
        self.units.Enable(False)
        self.units.SetValue(1)
        self._activation_bool.SetToolTip(_("Default: hyperbolic tangent (tanh)"))
        self._activation.Enable(False)
        self._activation.SetSelection(0)
        self._recurrent_activation_bool.SetToolTip(_("Default: hard sigmoid (hard_sigmoid)"))
        self._recurrent_activation.Enable(False)
        self._recurrent_activation.SetSelection(0)
        self._use_bias_bool.SetToolTip(_("If unchecked leave default.\nDefault: True"))
        self._use_bias.Enable(False)
        self._kernel_initializer.Enable(False)
        self._kernel_initializer.SetSelection(0)
        self._return_sequences.Enable(False)
        self._stateful_bool.SetToolTip(_("Default: False"))
        self._stateful.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: lstm_config_dialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(0, 6, 3, 3)
        label_1 = wx.StaticText(self, wx.ID_ANY, _("Long Short-Term Memory layer"))
        label_1.SetFont(wx.Font(16, wx.DECORATIVE, wx.NORMAL, wx.BOLD, 0, ""))
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.LEFT | wx.RIGHT | wx.TOP, 7)
        sizer_3.Add(self.hyperlink_1, 0, wx.ALIGN_CENTER | wx.BOTTOM, 14)
        grid_sizer_1.Add(self.units, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self.spin_button_1, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, _("Dimensionality of the output space"))
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self._activation_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._activation, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, _("Activation function to use"))
        grid_sizer_1.Add(label_3, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add(self.hyperlink_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self._recurrent_activation_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._recurrent_activation, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, _("Activation function to use for the recurrent step"))
        grid_sizer_1.Add(label_4, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self._use_bias_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._use_bias, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, _("Boolean, whether the layer uses a bias vector"))
        grid_sizer_1.Add(label_5, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self._kernel_initializer_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._kernel_initializer, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, _(
            "Initializer for the kernel weights matrix, used for the linear transformation of the inputs."))
        grid_sizer_1.Add(label_6, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add(self.hyperlink_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self._return_sequences_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._return_sequences, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_7 = wx.StaticText(self, wx.ID_ANY,
                                _("Whether to return the last output in the output sequence, or the full sequence"))
        grid_sizer_1.Add(label_7, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 2, wx.EXPAND, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add(self._stateful_bool, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add(self._stateful, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_8 = wx.StaticText(self, wx.ID_ANY, _(
            "If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch"))
        grid_sizer_1.Add(label_8, 3, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        grid_sizer_1.AddGrowableCol(1)
        grid_sizer_1.AddGrowableCol(3)
        sizer_3.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.button_dialog_ADVANCED, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 10)
        sizer_4.Add(self.button_dialog_CANCEL, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 10)
        sizer_4.Add(self.button_dialog_OK, 0, wx.ALIGN_CENTER | wx.ALL, 10)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def P_activation(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_activation' not implemented!")
        event.Skip()

    def P_recurrent_activation(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_recurrent_activation' not implemented!")
        event.Skip()

    def P_use_bias_bool(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_use_bias_bool' not implemented!")
        event.Skip()

    def P_kernel_initializer_bool(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_kernel_initializer_bool' not implemented!")
        event.Skip()

    def P_return_sequences_bool(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_return_sequences_bool' not implemented!")
        event.Skip()

    def P_stateful_bool(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'P_stateful_bool' not implemented!")
        event.Skip()

    def H_button_dialog_ADVANCED(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'H_button_dialog_ADVANCED' not implemented!")
        event.Skip()

    def H_button_dialog_CANCEL(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'H_button_dialog_CANCEL' not implemented!")
        event.Skip()

    def H_button_dialog_OK(self, event):  # wxGlade: lstm_config_dialog.<event_handler>
        print("Event handler 'H_button_dialog_OK' not implemented!")
        event.Skip()

# end of class lstm_config_dialog
